<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.minliu.demo.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.minliu.demo.pojo.User">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="phone" jdbcType="VARCHAR" property="phone"/>
        <result column="created_at" jdbcType="TIMESTAMP" property="createdAt"/>
        <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, username, password, email, phone, created_at, updated_at
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        DELETE FROM user
        WHERE id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.minliu.demo.pojo.User">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into user (id, username, password,
        email, phone, created_at,
        updated_at)
        values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
        #{email,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{createdAt,jdbcType=TIMESTAMP},
        #{updatedAt,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.minliu.demo.pojo.User">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="username != null">
                username,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="phone != null">
                phone,
            </if>
            <if test="createdAt != null">
                created_at,
            </if>
            <if test="updatedAt != null">
                updated_at,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="createdAt != null">
                #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null">
                #{updatedAt,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.minliu.demo.pojo.User">
        update user
        <set>
            <if test="username != null">
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="createdAt != null">
                created_at = #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null">
                updated_at = #{updatedAt,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.minliu.demo.pojo.User">
        UPDATE user
        SET username   = #{username,jdbcType=VARCHAR},
            password   = #{password,jdbcType=VARCHAR},
            email      = #{email,jdbcType=VARCHAR},
            phone      = #{phone,jdbcType=VARCHAR},
            created_at = #{createdAt,jdbcType=TIMESTAMP},
            updated_at = #{updatedAt,jdbcType=TIMESTAMP}
        WHERE id = #{id,jdbcType=INTEGER}
    </update>
    <!-- 根据用户名，邮箱查询用户 -->
    <select id="selectByUsernameOrEmail" resultMap="BaseResultMap">
        select
          <include refid="Base_Column_List"/>
        from user
        where username = #{usernameOrEmail,jdbcType=VARCHAR}
        or email = #{usernameOrEmail,jdbcType=VARCHAR}
    </select>

    <!-- 查询某字段是否已存在 -->
    <select id="findData" resultType="java.lang.Integer">
        SELECT 1
        FROM `user`
        <where>
            <choose>
                <when test="'username' != null and 'username'==field">
                    `username` = #{value,jdbcType=VARCHAR}
                </when>
                <when test="'email' != null and 'email'==field">
                    `email` = #{value,jdbcType=VARCHAR}
                </when>
                <when test="'phone'==field">
                    `phone` = #{value,jdbcType=VARCHAR}
                </when>
            </choose>
        </where>
        LIMIT 1
    </select>
    <!-- 指定角色 -->
    <insert id="assignRole">
        INSERT INTO user_roles (user_id, role_id)
            SELECT
                #{userId,jdbcType=INTEGER},
                id
            FROM role
            WHERE name = '${roleName}'
    </insert>
</mapper>